#!/bin/bash

# ======================================================================
# üéØ XUBUNTU MASTER SETUP ‚Äî FINAL EDITION (–ü–ö, Intel, –±–µ–∑ Snap, —Å Rofi @theme)
# ======================================================================

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$PROJECT_DIR/setup.log"
PC_MODE=true

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

print_step() {
    echo -e "${BLUE}‚ñ∂Ô∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

run_script() {
    local script="$1"
    if [ -f "$script" ]; then
        print_step "–ó–∞–ø—É—Å–∫: $(basename "$script")"
        log "–ó–∞–ø—É—Å–∫ $script"
        bash "$script" 2>&1 | tee -a "$LOG_FILE"
        if [ $? -eq 0 ]; then
            print_success "$(basename "$script") —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω."
            log "$(basename "$script") ‚Äî OK"
        else
            print_error "$(basename "$script") –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
            log "$(basename "$script") ‚Äî FAILED"
        fi
    else
        print_warning "–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $(basename "$script")) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."
        log "$(basename "$script") ‚Äî NOT FOUND"
    fi
    echo ""
}

# --- –ù–∞—á–∞–ª–æ ---
echo ""
echo -e "${GREEN}üöÄ XUBUNTU MASTER SETUP ‚Äî FINAL EDITION${NC}"
echo -e "${YELLOW}–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ü–ö —Å Intel UHD Graphics. –ü–æ–µ—Ö–∞–ª–∏!${NC}"
echo ""

echo "=== –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date) ===" > "$LOG_FILE"

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º GPU ---
HAS_INTEL=false
if command -v glxinfo &> /dev/null; then
    if glxinfo 2>/dev/null | grep -i "Intel" > /dev/null; then
        HAS_INTEL=true
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Intel GPU"
    fi
fi

# --- –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ ---
SCRIPTS=(
    "update_system_snap_flatpak.sh"     # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    "beautify_xubuntu_desktop.sh"       # 2. –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
    "setup_kitty_omz.sh"                # 3. –¢–µ—Ä–º–∏–Ω–∞–ª
    "install_dev_tools.sh"              # 4. Dev-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    "install_apps.sh"                   # 5. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ Snap!)
    "install_obsidian.sh"               # 6. Obsidian (Flatpak)
    "install_hidde_vpn.sh"              # 7. Hidde VPN
    "setup_gui_comfort.sh"              # 8. –î–æ–ø. –∫–æ–º—Ñ–æ—Ä—Ç
    "enable_transparency.sh"            # 9. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å + Picom
    "fix_app_icons.sh"                  # 10. –ò–∫–æ–Ω–∫–∏ (Firefox, VS Code –∏ –¥—Ä.)
    "setup_auto_backup.sh"              # 11. –ë—ç–∫–∞–ø—ã
    "cleanup_system.sh"                 # 12. –û—á–∏—Å—Ç–∫–∞
)

# –î–ª—è Intel ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å VS Code (–±–µ–∑ --disable-gpu)
if [ "$HAS_INTEL" = true ]; then
    SCRIPTS+=("fix_vscode_intel.sh")
else
    SCRIPTS+=("fix_vscode_black_window.sh")
fi

# --- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã ---
for script in "${SCRIPTS[@]}"; do
    run_script "$PROJECT_DIR/$script"
done

# --- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å: Rofi (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å @theme) ---
if command -v rofi &> /dev/null; then
    run_script "$PROJECT_DIR/fix_rofi_config.sh"
fi

# --- –§–∏–Ω–∞–ª ---
echo ""
echo -e "${GREEN}üéâ –í–°–Å –ì–û–¢–û–í–û! Xubuntu –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Ç–≤–æ–π –ü–ö.${NC}"
echo ""
if [ "$HAS_INTEL" = true ]; then
    echo -e "${BLUE}üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Intel UHD:${NC}"
    echo " ‚Ä¢ VS Code —Ä–∞–±–æ—Ç–∞–µ—Ç —Å GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º (–±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤)"
    echo " ‚Ä¢ –î—Ä–∞–π–≤–µ—Ä—ã Mesa –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
fi
echo ""
echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É:${NC}"
echo "   sudo reboot"
echo ""
echo -e "${BLUE}–õ–æ–≥: $LOG_FILE${NC}"
log "=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(date) ==="